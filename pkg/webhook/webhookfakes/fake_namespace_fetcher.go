// Code generated by counterfeiter. DO NOT EDIT.
package webhookfakes

import (
	"sync"

	"github.com/pivotal/projects-operator/pkg/webhook"
	v1 "k8s.io/api/core/v1"
)

type FakeNamespaceFetcher struct {
	GetNamespacesStub        func() ([]v1.Namespace, error)
	getNamespacesMutex       sync.RWMutex
	getNamespacesArgsForCall []struct {
	}
	getNamespacesReturns struct {
		result1 []v1.Namespace
		result2 error
	}
	getNamespacesReturnsOnCall map[int]struct {
		result1 []v1.Namespace
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNamespaceFetcher) GetNamespaces() ([]v1.Namespace, error) {
	fake.getNamespacesMutex.Lock()
	ret, specificReturn := fake.getNamespacesReturnsOnCall[len(fake.getNamespacesArgsForCall)]
	fake.getNamespacesArgsForCall = append(fake.getNamespacesArgsForCall, struct {
	}{})
	fake.recordInvocation("GetNamespaces", []interface{}{})
	fake.getNamespacesMutex.Unlock()
	if fake.GetNamespacesStub != nil {
		return fake.GetNamespacesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getNamespacesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNamespaceFetcher) GetNamespacesCallCount() int {
	fake.getNamespacesMutex.RLock()
	defer fake.getNamespacesMutex.RUnlock()
	return len(fake.getNamespacesArgsForCall)
}

func (fake *FakeNamespaceFetcher) GetNamespacesCalls(stub func() ([]v1.Namespace, error)) {
	fake.getNamespacesMutex.Lock()
	defer fake.getNamespacesMutex.Unlock()
	fake.GetNamespacesStub = stub
}

func (fake *FakeNamespaceFetcher) GetNamespacesReturns(result1 []v1.Namespace, result2 error) {
	fake.getNamespacesMutex.Lock()
	defer fake.getNamespacesMutex.Unlock()
	fake.GetNamespacesStub = nil
	fake.getNamespacesReturns = struct {
		result1 []v1.Namespace
		result2 error
	}{result1, result2}
}

func (fake *FakeNamespaceFetcher) GetNamespacesReturnsOnCall(i int, result1 []v1.Namespace, result2 error) {
	fake.getNamespacesMutex.Lock()
	defer fake.getNamespacesMutex.Unlock()
	fake.GetNamespacesStub = nil
	if fake.getNamespacesReturnsOnCall == nil {
		fake.getNamespacesReturnsOnCall = make(map[int]struct {
			result1 []v1.Namespace
			result2 error
		})
	}
	fake.getNamespacesReturnsOnCall[i] = struct {
		result1 []v1.Namespace
		result2 error
	}{result1, result2}
}

func (fake *FakeNamespaceFetcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getNamespacesMutex.RLock()
	defer fake.getNamespacesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNamespaceFetcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ webhook.NamespaceFetcher = new(FakeNamespaceFetcher)
