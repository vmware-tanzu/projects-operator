// Code generated by counterfeiter. DO NOT EDIT.
package webhookfakes

import (
	"sync"

	"github.com/pivotal/projects-operator/api/v1alpha1"
	"github.com/pivotal/projects-operator/pkg/webhook"
)

type FakeProjectFetcher struct {
	GetProjectsStub        func() ([]v1alpha1.Project, error)
	getProjectsMutex       sync.RWMutex
	getProjectsArgsForCall []struct {
	}
	getProjectsReturns struct {
		result1 []v1alpha1.Project
		result2 error
	}
	getProjectsReturnsOnCall map[int]struct {
		result1 []v1alpha1.Project
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProjectFetcher) GetProjects() ([]v1alpha1.Project, error) {
	fake.getProjectsMutex.Lock()
	ret, specificReturn := fake.getProjectsReturnsOnCall[len(fake.getProjectsArgsForCall)]
	fake.getProjectsArgsForCall = append(fake.getProjectsArgsForCall, struct {
	}{})
	fake.recordInvocation("GetProjects", []interface{}{})
	fake.getProjectsMutex.Unlock()
	if fake.GetProjectsStub != nil {
		return fake.GetProjectsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getProjectsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProjectFetcher) GetProjectsCallCount() int {
	fake.getProjectsMutex.RLock()
	defer fake.getProjectsMutex.RUnlock()
	return len(fake.getProjectsArgsForCall)
}

func (fake *FakeProjectFetcher) GetProjectsCalls(stub func() ([]v1alpha1.Project, error)) {
	fake.getProjectsMutex.Lock()
	defer fake.getProjectsMutex.Unlock()
	fake.GetProjectsStub = stub
}

func (fake *FakeProjectFetcher) GetProjectsReturns(result1 []v1alpha1.Project, result2 error) {
	fake.getProjectsMutex.Lock()
	defer fake.getProjectsMutex.Unlock()
	fake.GetProjectsStub = nil
	fake.getProjectsReturns = struct {
		result1 []v1alpha1.Project
		result2 error
	}{result1, result2}
}

func (fake *FakeProjectFetcher) GetProjectsReturnsOnCall(i int, result1 []v1alpha1.Project, result2 error) {
	fake.getProjectsMutex.Lock()
	defer fake.getProjectsMutex.Unlock()
	fake.GetProjectsStub = nil
	if fake.getProjectsReturnsOnCall == nil {
		fake.getProjectsReturnsOnCall = make(map[int]struct {
			result1 []v1alpha1.Project
			result2 error
		})
	}
	fake.getProjectsReturnsOnCall[i] = struct {
		result1 []v1alpha1.Project
		result2 error
	}{result1, result2}
}

func (fake *FakeProjectFetcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getProjectsMutex.RLock()
	defer fake.getProjectsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProjectFetcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ webhook.ProjectFetcher = new(FakeProjectFetcher)
